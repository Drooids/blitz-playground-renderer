IMPORTANT:
	Can't draw anything without shaders:
	https://stackoverflow.com/questions/20376581/is-it-possible-to-draw-anything-in-opengl-3-without-writing-glsl-shaders-will

Fragment:
	Fragment is a potential pixel.
	https://gamedev.stackexchange.com/questions/8977/what-is-a-fragment

Pipeline:
	Vertices:
		Just vertices

	VOB:
		The VBO(Vertex Buffer Object) is one of the “objects” of OpenGL.
		It holds all of a single vertex attributes for an object. Not all vertexes,
		but all vertexes of one type, like all positions or all colors. So you’ll
		end up with one VBO for positions, one VBO for colors, etc…

	VAO:
		~

	glVertexAttribPointer:
		After getting the attribute from the shader, tell the system what type of element it is?

	Sampling:
		Retrieving the texture color using texture coordinates is called sampling

	texel:
		Texture pixel

	mipmaps:
		~

	linear algebra:
		transformations:
			float trans[]; // the matrix
			// The last parameter (value_ptr) is the actual matrix data, but GLM stores their matrices
			// not in the exact way that OpenGL likes to receive them so we first transform
			// them with GLM's built-in function value_ptr.
			glUniformMatrix4fv(transLoc, 1, GL_FALSE, glm::value_ptr(trans));

Math:
	Camera:
		Perspective:
		https://stackoverflow.com/questions/21830340/understanding-glmlookat
		https://stackoverflow.com/questions/8115352/glmperspective-explanation

References:
https://cognitivewaves.wordpress.com/opengl-vbo-shader-vao/
http://headerphile.com/sdl2/opengl-part-2-vertexes-vbos-and-vaos/
